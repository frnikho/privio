/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LibraryIndexRouteImport } from './routes/library/index'
import { Route as GameIndexRouteImport } from './routes/game/index'
import { Route as AccountIndexRouteImport } from './routes/account/index'
import { Route as GameGameIdRouteImport } from './routes/game/$gameId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LibraryIndexRoute = LibraryIndexRouteImport.update({
  id: '/library/',
  path: '/library/',
  getParentRoute: () => rootRouteImport,
} as any)
const GameIndexRoute = GameIndexRouteImport.update({
  id: '/game/',
  path: '/game/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountIndexRoute = AccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRouteImport,
} as any)
const GameGameIdRoute = GameGameIdRouteImport.update({
  id: '/game/$gameId',
  path: '/game/$gameId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/game/$gameId': typeof GameGameIdRoute
  '/account': typeof AccountIndexRoute
  '/game': typeof GameIndexRoute
  '/library': typeof LibraryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/game/$gameId': typeof GameGameIdRoute
  '/account': typeof AccountIndexRoute
  '/game': typeof GameIndexRoute
  '/library': typeof LibraryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/game/$gameId': typeof GameGameIdRoute
  '/account/': typeof AccountIndexRoute
  '/game/': typeof GameIndexRoute
  '/library/': typeof LibraryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/game/$gameId' | '/account' | '/game' | '/library'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/game/$gameId' | '/account' | '/game' | '/library'
  id: '__root__' | '/' | '/game/$gameId' | '/account/' | '/game/' | '/library/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GameGameIdRoute: typeof GameGameIdRoute
  AccountIndexRoute: typeof AccountIndexRoute
  GameIndexRoute: typeof GameIndexRoute
  LibraryIndexRoute: typeof LibraryIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/library/': {
      id: '/library/'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/': {
      id: '/game/'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof GameIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/$gameId': {
      id: '/game/$gameId'
      path: '/game/$gameId'
      fullPath: '/game/$gameId'
      preLoaderRoute: typeof GameGameIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GameGameIdRoute: GameGameIdRoute,
  AccountIndexRoute: AccountIndexRoute,
  GameIndexRoute: GameIndexRoute,
  LibraryIndexRoute: LibraryIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
